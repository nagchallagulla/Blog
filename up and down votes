const commentsReducer = (state = initialState, action) => {
  switch (action.type) {
    case UPVOTE_COMMENT:
      return {
        ...state,
        comments: state.comments.map((comment) =>
          comment.id === action.payload.id
            ? { ...comment, upvotes: comment.upvotes + 1 }
            : comment
        ),
      };
    case DOWNVOTE_COMMENT:
      return {
        ...state,
        comments: state.comments.map((comment) =>
          comment.id === action.payload.id
            ? { ...comment, downvotes: comment.downvotes + 1 }
            : comment
        ),
      };
    default:
      return state;
  }
};
import React from "react";
import { useDispatch, useSelector } from "react-redux";
import { upvoteComment, downvoteComment } from "./actions";

const CommentList = () => {
  const dispatch = useDispatch();
  const comments = useSelector((state) => state.comments.comments);

  return (
    <div>
      <ul>
        {comments.map((comment) => (
          <li key={comment.id}>
            <div>{comment.title}</div>
            <div>{comment.comment}</div>
            <div>
              <button onClick={() => dispatch(upvoteComment(comment.id))}>
                Upvote ({comment.upvotes})
              </button>
              <button onClick={() => dispatch(downvoteComment(comment.id))}>
                Downvote ({comment.downvotes})
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default CommentList;
